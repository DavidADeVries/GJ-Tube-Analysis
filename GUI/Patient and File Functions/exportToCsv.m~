function [ ] = exportToCsv(patients, exportPath, overwrite)
%exportToCsv exports the list of patients to the given .csv path.
%'overwrite' specifies whether to overwrite the file completely, or whether
%to append. Note that when appending, only the patients in the file that
%are NOT in the list of patients are saved. If a patient in is the file and
%in the list, the one in the list takes precedent and COMPLETELY overwrites
%the existing patient data

newline = '\n';
delim = ',';

linesToKeep = cell(0);
    
if ~overwrite
    [fileId, err] = fopen(exportPath, 'r');
    
    if isempty(err)        
        fgets(fileId); %ignore header
        line = fgets(fileId);
        
        ignoreTillNextId = false;
        
        i = 1;
        
        while(ischar(line))
            line = strrep(line, [delim, delim], [delim, ' ', delim]); %makes sure empty cells aren't swept aside
            split = strsplit(line, ',');
            patientId = char(split(1));
            
            if ignoreTillNextId && ~isempty(patientId)
                ignoreTillNextId = false;
            end
            
            if ~ignoreTillNextId && isPatientIdPresent(patientId, patients) %need to be removed, do not save lines
                ignoreTillNextId = true;
            end
            
            if ~ignoreTillNextId   
                linesToKeep{i} = struct(...
                    'patientId', char(split(1)),...
                    'patientSex', char(split(2)),...
                    'patientDob', strrep(char(split(3)), ' ', ''),... %if it was empty, it got set to ' ', so now put it back
                    'sequenceNumber', str2double(char(split(4))),...
                    'studyDate', char(split(5)),...
                    'modality', char(split(7)),... % split(6) skipped; age formula (must be updated to have proper cell references)
                    'studyName', char(split(8)),...
                    'seriesName', char(split(9)),...
                    'measurementA', str2double(char(split(10))),...
                    'measurementB', str2double(char(split(11))),...
                    'measurementC', str2double(char(split(12))),...
                    'measurementD', str2double(char(split(13))),...
                    'measurementE', str2double(char(split(14))),...
                    'measurementF', str2double(char(split(15))),...
                    'measurementG', str2double(char(split(16))),...
                    'measurementH', str2double(char(split(17))),...
                    'measurementI', str2double(char(split(18))),...
                    'measurementJ', str2double(char(split(19))));
                
                i = i + 1;
            end
            
            line = fgets(fileId);
        end
        
        fclose(fileId);
    else
        warning(err);
    end
end
    
[fileId, err] = fopen(exportPath, 'w');

if isempty(err) %write file anew
    %write column headers
    
    headers = { 'Patient Id',...
        'Patient Sex',...
        'Patient DOB (MMM-YY)',...
        'Sequence Number',...
        'Study Date (DD-MMM-YY)',...
        'Age at Study (Months)',...
        'Modality',...
        'Study Name',...
        'Series Name',...
        'Measurement a (u)',...
        'Measurement b (u)',...
        'Measurement c (u)',...
        'Measurement d (u)',...
        'Measurement e (u)',...
        'Measurement f (u)',...
        'Measurement g (u)',...
        'Measurement h (u)',...
        'Measurement i (Curvature)',...
        'Measurement j (Curvature)'};
    
    numHeaders = length(headers);
    
    for i=1:numHeaders
        fprintf(fileId, headers{i});
        
        if i ~= numHeaders
            fprintf(fileId, delim);
        end
    end
    
    fprintf(fileId, newline);
    
    lineNumber = 2; %line 1 is the headers
    
    %write data from previous file if choosen to not overwrite
    
    for i=1:length(linesToKeep)
        printToFile(fileId, lineNumber, linesToKeep{i}, newline, delim);
        lineNumber = lineNumber + 1;
    end
    
    %write new data from patient list
    
    for i=1:length(patients)
        patient = patients(i);
        
        sequenceNumber = 1; %reset sequence number counter for each patient
        
        studies = patient.studies;
        
        for j=1:length(studies)
            study = studies(j);
            
            series = study.series;
            
            for k=1:length(series)
                singularSeries = series(k);
                
                files = singularSeries.files;
                
                
                
                for l=1:length(files)
                    file = files(l);
                    
                    if ~isempty(file.metricPoints) && ~isempty(file.refPoints) && ~isempty(file.midlinePoints) %these fields must be populated for analysis to be considered complete
                        
                        measurements = file.getMeasurements();
                        
                        values = struct(...
                            'patientId', patient.patientId,...
                            'patientSex', file.dicomInfo.PatientSex,...
                            'patientDob', '',...
                            'sequenceNumber', sequenceNumber,...
                            'studyDate', file.date.stringForCsv(),...
                            'modality', file.dicomInfo.Modality,...
                            'studyName', study.name,...
                            'seriesName', singularSeries.name,...
                            'measurementA', measurements.a,...
                            'measurementB', measurements.b,...
                            'measurementC', measurements.c,...
                            'measurementD', measurements.d,...
                            'measurementE', measurements.e,...
                            'measurementF', measurements.f,...
                            'measurementG', measurements.g,...
                            'measurementH', measurements.h,...
                            'measurementI', measurements.i,...
                            'measurementJ', measurements.j);
                        
                        printToFile(fileId, lineNumber, values, newline, delim);
                        
                        lineNumber = lineNumber + 1;
                        sequenceNumber = sequenceNumber + 1;
                    end
                end
            end
        end
    end
    
    fclose(fileId); % close file after done writing
    
else
    warning(err);
end

end

function [bool] = isPatientIdPresent(patientId, patients)
    bool = false;
    
    i=1;
    
    while (i <= length(patients) && ~bool)
        if strcmp(patients(i).patientId, patientId)
            bool = true;
        end
        
        i = i+1;
    end
end

function [] = printToFile(fileId, lineNumber, values, newline, delim)
    dobCell = ['C', num2str(lineNumber)];
    studyDateCell = ['E', num2str(lineNumber)];

    ageFormula = ['=(MONTH(', studyDateCell ,') - MONTH(', dobCell, '))+(YEAR(', studyDateCell, ') - YEAR(', dobCell, '))*12'];
    
    format = struct(...
        'patientId', '%s',...
        'patientSex', '%s',...
        'patientDob', '%s',...
        'sequenceNumber', '%d',...
        'studyDate', '%s',...
        'ageInMonths', '%s',... %since formula is string
        'modality', '%s',...
        'studyName', '%s',...
        'seriesName', '%s',...
        'measurementA', '%6.1f',...
        'measurementB', '%6.1f',...
        'measurementC', '%6.1f',...
        'measurementD', '%6.1f',...
        'measurementE', '%6.1f',...
        'measurementF', '%6.1f',...
        'measurementG', '%6.1f',...
        'measurementH', '%6.1f',...
        'measurementI', '%6.4f',...
        'measurementJ', '%6.4f');
    
    line = strcat(...
        sprintf(format.patientId, values.patientId), delim,...
        sprintf(format.patientSex, values.patientSex), delim,...
        sprintf(format.patientDob, values.patientDob), delim,...
        sprintf(format.sequenceNumber, values.sequenceNumber), delim,...
        sprintf(format.studyDate, values.studyDate), delim,...
        sprintf(format.ageInMonths, ageFormula), delim,...
        sprintf(format.modality, values.modality), delim,...
        sprintf(format.studyName, values.studyName), delim,...
        sprintf(format.seriesName, values.seriesName), delim,...
        sprintf(format.measurementA, values.measurementA), delim,...
        sprintf(format.measurementB, values.measurementB), delim,...
        sprintf(format.measurementC, values.measurementC), delim,...
        sprintf(format.measurementD, values.measurementD), delim,...
        sprintf(format.measurementE, values.measurementE), delim,...
        sprintf(format.measurementF, values.measurementF), delim,...
        sprintf(format.measurementG, values.measurementG), delim,...
        sprintf(format.measurementH, values.measurementH), delim,...
        sprintf(format.measurementI, values.measurementI), delim,...
        sprintf(format.measurementJ, values.measurementJ), delim);
    
    fprintf(fileId, line);

    fprintf(fileId, newline);
end
